{"version":3,"sources":["Home.js","Api.js","NavBar.js","MenuItems.js","AddForm.js","Menu.js","App.js","serviceWorker.js","index.js"],"names":["Home","menuItems","className","snacks","length","drinks","BASE_API_URL","SnackOrBoozeApi","itemType","axios","get","result","data","post","NavBar","expand","exact","to","navbar","ItemMenu","type","map","items","id","name","AddForm","addToMenuItems","useState","description","recipe","serve","formData","setFormData","handleChange","e","target","value","onSubmit","placeholder","onChange","FoodItem","cantFind","useParams","snack","find","App","isLoading","setIsLoading","setMenuItems","useEffect","getMenuItems","ItemData","postMenuItems","path","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8f3a12b.chunk.js","sourcesContent":["import React from 'react';\nimport { Card, CardBody, CardTitle } from 'reactstrap';\n\nfunction Home({ menuItems }) {\n\treturn (\n\t\t<section className=\"col-md-8\">\n\t\t\t<Card>\n\t\t\t\t<CardBody className=\"text-center\">\n\t\t\t\t\t<CardTitle>\n\t\t\t\t\t\t<h3 className=\"font-weight-bold\">Welcome to Silicon Valley's premier dive cafe!</h3>\n\t\t\t\t\t</CardTitle>\n\t\t\t\t\t<span>\n\t\t\t\t\t\tWe have {menuItems.snacks.length} snacks and {menuItems.drinks.length} drinks.\n\t\t\t\t\t</span>\n\t\t\t\t</CardBody>\n\t\t\t</Card>\n\t\t</section>\n\t);\n}\n\nexport default Home;\n","import axios from 'axios';\n\nconst BASE_API_URL = 'http://localhost:5000';\n\n/* \n  json-server will give you CRUD endpoints on snacks and drinks.\n  Here we've provided you with a single action to get all drinks.\n\n  You'll need to add to this class as you build features for the app.\n*/\n\nclass SnackOrBoozeApi {\n\tstatic async getMenuItems(itemType) {\n\t\tconst result = await axios.get(`${BASE_API_URL}/${itemType}`);\n\t\treturn result.data;\n\t}\n\tstatic async postMenuItems(itemType, data) {\n\t\tconst result = await axios.post(`${BASE_API_URL}/${itemType}`, data);\n\t\treturn result.data;\n\t}\n}\n\nexport default SnackOrBoozeApi;\n","import React from 'react';\nimport './NavBar.css';\nimport { NavLink } from 'react-router-dom';\nimport { Navbar, Nav, NavItem } from 'reactstrap';\n\nfunction NavBar() {\n\treturn (\n\t\t<div>\n\t\t\t<Navbar expand=\"md\">\n\t\t\t\t<NavLink exact to=\"/\" className=\"navbar-brand\">\n\t\t\t\t\tSnack or Booze\n\t\t\t\t</NavLink>\n\n\t\t\t\t<Nav className=\"ml-auto\" navbar>\n          <NavItem>\n            <NavLink to=\"/snacks\">Snacks</NavLink>\n          </NavItem>\n          <NavItem>\n            <NavLink to=\"/drinks\">Drinks</NavLink>\n          </NavItem>\n\t\t\t\t</Nav>\n\t\t\t</Navbar>\n\t\t</div>\n\t);\n}\n\nexport default NavBar;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport './Menu.css';\nimport { Card, CardBody, CardTitle, CardText, ListGroup, ListGroupItem } from 'reactstrap';\n\nfunction ItemMenu({ menuItems, type }) {\n\treturn (\n\t\t<section className=\"col-md-4\">\n\t\t\t<Card>\n\t\t\t\t<CardBody>\n\t\t\t\t\t<CardTitle className=\"font-weight-bold text-center\"> {type} Menu</CardTitle>\n\t\t\t\t\t<CardText>\n\t\t\t\t\t\tHere are all the items on the {type} menu.\n\t\t\t\t\t</CardText>\n\t\t\t\t\t<ListGroup>\n\t\t\t\t\t\t{menuItems.map((items) => (\n\t\t\t\t\t\t\t<Link to={`/${type}/${items.id}`} key={items.id}>\n\t\t\t\t\t\t\t\t<ListGroupItem>{items.name}</ListGroupItem>\n\t\t\t\t\t\t\t</Link>\n\t\t\t\t\t\t))}\n\t\t\t\t\t</ListGroup>\n\t\t\t\t\t<br />\n\t\t\t\t\t<Link to={`/${type}/new`}>Add new {type}</Link>\n\t\t\t\t</CardBody>\n\t\t\t</Card>\n\t\t</section>\n\t);\n}\n\nexport default ItemMenu;\n","import React from 'react';\nimport { Card, CardBody, CardTitle, Input, Button } from 'reactstrap';\nimport { useState } from 'react';\n\nfunction AddForm({ type, addToMenuItems }) {\n\tconst initialState = { \n\t\tname: '',\n\t\tdescription: '',\n\t\trecipe: '', \n\t\tserve: '' \n\t};\n\tconst [ formData, setFormData ] = useState(initialState);\n\tconst handleChange = (e) => {\n\t\tsetFormData({ ...formData, [e.target.name]: e.target.value });\n\t};\n\tconst handleSubmit = () => {\n\t\taddToMenuItems(type, formData);\n\t};\n\treturn (\n\t\t<section className=\"col-md-4\">\n\t\t\t<Card>\n\t\t\t\t<CardBody>\n\t\t\t\t\t<CardTitle className=\"font-weight-bold text-center\">Add new {type}</CardTitle>\n\t\t\t\t\t<br />\n\t\t\t\t\t<form onSubmit={handleSubmit}>\n\t\t\t\t\t\t<Input type=\"text\" name=\"name\" placeholder=\"Name\" onChange={handleChange} />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Input type=\"textarea\" name=\"description\" placeholder=\"Description\" onChange={handleChange} />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Input type=\"textarea\" name=\"recipe\" placeholder=\"Recipe\" onChange={handleChange} />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Input type=\"textarea\" name=\"serve\" placeholder=\"Serve\" onChange={handleChange} />\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<Button>Add</Button>\n\t\t\t\t\t</form>\n\t\t\t\t</CardBody>\n\t\t\t</Card>\n\t\t</section>\n\t);\n}\n\nexport default AddForm;\n\n","import React from \"react\";\nimport { Redirect, useParams } from \"react-router-dom\";\nimport { Card, CardBody, CardTitle, CardText } from \"reactstrap\";\n\nfunction FoodItem({ items, cantFind }) {\n  const { id } = useParams();\n\n  let snack = items.find(snack => snack.id === id);\n  if (!snack) return <Redirect to={cantFind} />;\n\n  return (\n    <section>\n      <Card>\n        <CardBody>\n          <CardTitle className=\"font-weight-bold text-center\">\n            {snack.name}\n          </CardTitle>\n          <CardText className=\"font-italic\">{snack.description}</CardText>\n          <p>\n            <b>Recipe:</b> {snack.recipe}\n          </p>\n          <p>\n            <b>Serve:</b> {snack.serve}\n          </p>\n        </CardBody>\n      </Card>\n    </section>\n  );\n}\n\nexport default FoodItem;\n","import React, { useState, useEffect } from 'react';\nimport { BrowserRouter } from 'react-router-dom';\nimport './App.css';\nimport Home from './Home';\nimport SnackOrBoozeApi from './Api';\nimport NavBar from './NavBar';\nimport { Route, Switch } from 'react-router-dom';\nimport ItemMenu from './MenuItems';\nimport ItemForm from './AddForm';\nimport Snack from './Menu';\n\nfunction App() {\n\tconst [ isLoading, setIsLoading ] = useState(true);\n\tconst [ menuItems, setMenuItems ] = useState([]);\n\n\tuseEffect(() => {\n\t\tasync function getMenuItems() {\n\t\t\tlet snacks = await SnackOrBoozeApi.getMenuItems('snacks');\n\t\t\tlet drinks = await SnackOrBoozeApi.getMenuItems('drinks');\n\t\t\tsetMenuItems({ drinks, snacks });\n\t\t\tsetIsLoading(false);\n\t\t}\n\t\tgetMenuItems();\n\t}, []);\n\n\tconst addToMenuItems = async (type, ItemData) => {\n\t\tawait SnackOrBoozeApi.postMenuItems(type, ItemData);\n\t};\n\n\tif (isLoading) {\n\t\treturn <p>Loading &hellip;</p>;\n\t}\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<BrowserRouter>\n\t\t\t\t<NavBar />\n\t\t\t\t<main>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact path=\"/\">\n\t\t\t\t\t\t\t<Home menuItems={menuItems} />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/snacks\">\n\t\t\t\t\t\t\t<ItemMenu menuItems={menuItems.snacks} type=\"snacks\" title=\"Snacks\" />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/drinks\">\n\t\t\t\t\t\t\t<ItemMenu menuItems={menuItems.drinks} type=\"drinks\" title=\"Drinks\" />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/snacks/new\">\n\t\t\t\t\t\t\t<ItemForm type=\"snacks\" addToMenuItems={addToMenuItems} />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route exact path=\"/drinks/new\">\n\t\t\t\t\t\t\t<ItemForm type=\"drinks\" addToMenuItems={addToMenuItems} />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/snacks/:id\">\n\t\t\t\t\t\t\t<Snack items={menuItems.snacks} cantFind=\"/snacks\" />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route path=\"/drinks/:id\">\n\t\t\t\t\t\t\t<Snack items={menuItems.drinks} cantFind=\"/drinks\" />\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t\t<Route>\n\t\t\t\t\t\t\t<p>Hmmm. I can't seem to find what you want.</p>\n\t\t\t\t\t\t</Route>\n\t\t\t\t\t</Switch>\n\t\t\t\t</main>\n\t\t\t</BrowserRouter>\n\t\t</div>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}